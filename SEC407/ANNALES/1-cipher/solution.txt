1) - chiffrement RC4
   - mécanisme standard
   - chiffrement a flot

2) on ne peut pas detourner la fonction car decrypt_message n'est pas dans une librairie statique

> b* @appel decrypt_message
> x/1dw $esp+12 # afficher la taille du message 
> x/1xw $esp+8 # afficher le pointeur du message
> x/70xb 0x[@message]

ou dumpargs
Guessed arguments:
arg[0]: 0xffffce1c ("celellec\n")
arg[1]: 0xffffce0c ("^)6i\331^Oَ\263\340\262#m\303\036celellec\n")
arg[2]: 0xffffce3c --> 0x6869e235 
arg[3]: 0x46 ('F')
arg[4]: 0xffffd03c --> 0x0 
gdb-peda$ x/70xb 0xffffce3c
0xffffce3c:	0x35	0xe2	0x69	0x68	0x91	0x79	0x17	0x77
0xffffce44:	0x21	0x25	0x87	0x4a	0x5b	0xce	0x1c	0x16
0xffffce4c:	0x49	0x41	0xb5	0x10	0xca	0xa8	0xdd	0x79
0xffffce54:	0x28	0xee	0x6f	0x2e	0x13	0xe4	0x7e	0x94
0xffffce5c:	0x78	0x57	0x16	0xf3	0xaa	0x25	0x89	0xde
0xffffce64:	0x90	0x6e	0xb4	0xb4	0xa2	0x85	0x48	0xd5
0xffffce6c:	0x2e	0x2e	0xd3	0xac	0x87	0xe6	0x68	0xa6
0xffffce74:	0xb0	0x0d	0x55	0x8d	0x8e	0x6a	0x64	0x3b
0xffffce7c:	0x0c	0x40	0x47	0xe6	0x44	0xb4

recherche du fopen 
b* 0x@fopen
x/1xw $esp+0 # pointeur de la chaine
x/1s @chaine # donne /dev/urandom   -> il faudrait utiliser /dev/random pour que ce soit non predictible
x/1xw $esp+4
x/1s @chaine # donne rb

- on va patcher le binaire 
soit avec gdb soit directement dans le binaire 
on modifie en mettant le nom en hexa et on finit par 00

- on va recuperer les 3 chiffrés 
> b* @appel decrypt_message

Guessed arguments:
arg[0]: 0xffffce1c ("celellec\n")
arg[1]: 0xffffce0c ("^)6i\331^Oَ\263\340\262#m\303\036celellec\n")
arg[2]: 0xffffce3c --> 0x6869e235 
arg[3]: 0x46 ('F')
arg[4]: 0xffffd03c --> 0x0 
gdb-peda$ x/70xb 0xffffce2c
0xffffce2c:	0x9c	0x71	0xec	0x2f	0xd5	0x52	0x33	0x4f
0xffffce34:	0xef	0x26	0x7a	0x06	0x39	0x1d	0xb2	0x01
0xffffce3c:	0xa2	0x3a	0x3c	0xf7	0xb6	0xec	0x8f	0xe2
0xffffce44:	0x65	0x46	0x2c	0x41	0x53	0xf3	0x2d	0xbe
0xffffce4c:	0xfb	0xa9	0x36	0x55	0x08	0xcb	0xea	0xe4
0xffffce54:	0x61	0x37	0xc4	0xb2	0x10	0x88	0x4a	0x7c
0xffffce5c:	0xab	0x56	0xfd	0x5e	0xcf	0x42	0xea	0xa5
0xffffce64:	0x2a	0x22	0xab	0x72	0xc9	0x1f	0x29	0x50
0xffffce6c:	0x92	0xa0	0xc3	0x58	0x4a	0x48

0xffffce2c:	0x8a	0x70	0xec	0x61	0xc5	0x5b	0x3c	0x5d
0xffffce34:	0xaa	0x6f	0x6d	0x47	0x2c	0x1e	0xf6	0x1e
0xffffce3c:	0xa8	0x7c	0x1b	0xd4	0x85	0xaa	0x88	0xff
0xffffce44:	0x21	0x48	0x3e	0x56	0x4e	0xe7	0x39	0xf6
0xffffce4c:	0xcc	0xa6	0x13	0x66	0x01	0xec	0xdd	0xb8
0xffffce54:	0x6f	0x5a	0xe3	0x08	0x99	0x90	0x4b	0x7a
0xffffce5c:	0xe2	0x40	0xf9	0x59	0xd2	0x0d	0xf0	0xb3
0xffffce64:	0x6b	0x6e	0xaa	0x24	0x80	0x51	0x28	0x50
0xffffce6c:	0x92	0xa0	0xc3	0x58	0x4a	0x48

0xffffce2c:	0x90	0x77	0xfc	0x32	0x83	0x44	0x32	0x57
0xffffce34:	0xe7	0x63	0x6d	0x47	0x3b	0x1b	0xfc	0x09
0xffffce3c:	0xae	0x3a	0x4d	0x92	0xd0	0xa1	0x8a	0xe5
0xffffce44:	0x36	0x0b	0x7f	0x02	0x16	0xa0	0x73	0xbe
0xffffce4c:	0xc4	0xa9	0x55	0x63	0x1f	0xfe	0xc9	0xa0
0xffffce54:	0x20	0x0f	0x85	0xa5	0x17	0x99	0x51	0x6d
0xffffce5c:	0xab	0x44	0xf9	0x5e	0x9b	0x0e	0x5d	0x60
0xffffce64:	0x65	0x61	0xa5	0x25	0x80	0x51	0x28	0x50
0xffffce6c:	0x92	0xa0	0xc3	0x58	0x4a	0x48

Maintenant, on fait c1 ^ c2 ^ m1 = m2
					c1 ^ c3 ^ m1 = m3
					c3 ^ c2 ^ m1 = m1





 
